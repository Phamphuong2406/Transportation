@model Transportation.Infrastructure.Data.ShippingRequest
@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="card-body p-0">
        <button type="button" onclick="getShip()">Tính giá vận chuyển</button>
    

        <div class="row">
            <div id="map" class="col-lg-6"></div>

            <div class="col-lg-6">
                <div class="p-5">
                    <div class="text-center">
                        <h1 class="h4 text-gray-900 mb-4">Tạo mới yêu cầu vận chuyển</h1>
                    </div>
                    <form asp-controller="ShippingRequests" asp-action="Create" method="post" class="row g-3 needs-validation" novalidate>
                        <div class="form-group">
                            <label class="form-label">Điểm lấy hàng</label>
                            <select asp-for="PickupLocation" class="form-control" id="pickupWarehouse" required>
                                <option value="">-- Chọn kho --</option>
                                @foreach (var warehouse in ViewBag.Warehouses)
                                {
                                    <option value="@warehouse.WarehouseId"
                                            data-lat="@warehouse.Latitude"
                                            data-lng="@warehouse.Longitude">
                                        @warehouse.Name
                                    </option>
                                }
                            </select>
                            <span asp-validation-for="PickupLocation" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Điểm nhận hàng</label>
                            <select asp-for="DropoffLocation" class="form-control" id="dropoffWarehouse" required>
                                <option value="">-- Chọn kho --</option>
                                @foreach (var warehouse in ViewBag.Warehouses)
                                {
                                    <option value="@warehouse.WarehouseId"
                                            data-lat="@warehouse.Latitude"
                                            data-lng="@warehouse.Longitude">
                                        @warehouse.Name
                                    </option>
                                }
                            </select>
                            <span asp-validation-for="DropoffLocation" class="text-danger"></span>
                        </div>

                        <div class="form-group row">
                            <div class="col-sm-6">
                                <label class="form-label">Thời gian (phút)</label>
                                <input class="form-control" id="duration" readonly>
                            </div>
                            <div class="col-sm-6">
                                <label class="form-label">Khoảng cách (km)</label>
                                <input class="form-control" id="distance" readonly>
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-sm-6">
                                <label class="form-label">Trọng lượng (kg)</label>
                                <input asp-for="Weight" class="form-control" required>
                                <span asp-validation-for="Weight" class="text-danger"></span>
                            </div>
                            <div class="col-sm-6">
                                <label class="form-label">Giá vận chuyển (nghìn đồng)</label>
                                <input asp-for="ShippingCost" class="form-control" required>
                                <span asp-validation-for="ShippingCost" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-sm-6">
                                <label class="form-label">Ngày lấy hàng</label>
                                <input type="date" asp-for="Pickupdate" class="form-control" required>
                                <span asp-validation-for="Pickupdate" class="text-danger"></span>
                            </div>
                            <div class="col-sm-6">
                                <label class="form-label">Ngày trả hàng</label>
                                <input type="date" asp-for="Deliverydate" class="form-control" required>
                                <span asp-validation-for="Deliverydate" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Ghi chú</label>
                            <input asp-for="Note" class="form-control">
                            <span asp-validation-for="Note" class="text-danger"></span>
                        </div>

                        <input type="hidden" id="FromLatitude" name="FromLatitude" />
                        <input type="hidden" id="FromLongitude" name="FromLongitude" />
                        <input type="hidden" id="ToLatitude" name="ToLatitude" />
                        <input type="hidden" id="ToLongitude" name="ToLongitude" />

                        <div class="col-12">
                            <button class="btn btn-primary w-100" type="submit">Đặt hàng</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const map = L.map('map').setView([10.762622, 106.660172], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            const pickupSelect = document.getElementById("pickupWarehouse");
            const dropoffSelect = document.getElementById("dropoffWarehouse");
            let routingControl;

            function calculateRoute(lat1, lng1, lat2, lng2) {
                if (routingControl) {
                    map.removeControl(routingControl);
                }

                routingControl = L.Routing.control({
                    waypoints: [
                        L.latLng(lat1, lng1),
                        L.latLng(lat2, lng2)
                    ],
                    routeWhileDragging: false
                }).addTo(map);

                routingControl.on('routesfound', function (e) {
                    const route = e.routes[0];
                    const distance = (route.summary.totalDistance / 1000).toFixed(2);
                    const duration = (route.summary.totalTime / 60).toFixed(2);

                    document.getElementById("distance").value = distance;
                    document.getElementById("duration").value = duration;
                   
                });
            }

            function updateRoute() {
                const pickupOption = pickupSelect.options[pickupSelect.selectedIndex];
                const dropoffOption = dropoffSelect.options[dropoffSelect.selectedIndex];

                const pickupLat = parseFloat(pickupOption?.getAttribute("data-lat"));
                const pickupLng = parseFloat(pickupOption?.getAttribute("data-lng"));
                const dropoffLat = parseFloat(dropoffOption?.getAttribute("data-lat"));
                const dropoffLng = parseFloat(dropoffOption?.getAttribute("data-lng"));

            
                if (!isNaN(pickupLat) && !isNaN(pickupLng) && !isNaN(dropoffLat) && !isNaN(dropoffLng)) {
                    calculateRoute(pickupLat, pickupLng, dropoffLat, dropoffLng);

                    // Gán giá trị latitude và longitude vào các input hidden
                    document.getElementById("FromLatitude").value = pickupLat;
                    document.getElementById("FromLongitude").value = pickupLng;
                    document.getElementById("ToLatitude").value = dropoffLat;
                    document.getElementById("ToLongitude").value = dropoffLng;
                }

            }

         

            pickupSelect.addEventListener("change", updateRoute);
            dropoffSelect.addEventListener("change", updateRoute);

           

        });
        // Hàm tính chi phí vận chuyển
        function getShip() {
            // Lấy giá trị từ các ô input `#distance` và `#Weight`
            var distance = parseFloat(document.getElementById("distance").value);
            var weight = parseFloat(document.getElementById("Weight").value);

            // Kiểm tra nếu cả khoảng cách và trọng lượng đều đã được nhập
            if (!isNaN(distance) && !isNaN(weight)) {
                $.ajax({
                    url: '/ShippingRequests/CalculateShippingCost', // Đường dẫn tới API hoặc action trên server
                    method: 'POST',
                    data: {
                        distance: distance,
                        weight: weight
                    },
                    // Xử lý khi yêu cầu thành công
                    success: function (data) {
                        // Giả sử dữ liệu trả về là chi phí vận chuyển, bạn sẽ hiển thị nó
                        document.getElementById("ShippingCost").value = data;
                    },
                    // Xử lý khi yêu cầu thất bại
                    error: function (error) {
                        alert('Yêu cầu thất bại');
                        console.log(error);
                    }
                });
            } else {
                alert('Vui lòng điền đầy đủ thông tin!');
            }
        }
    </script>
}




















@* @section Scripts {
    <script>
        // Khởi tạo bản đồ
        const map = L.map('map').setView([10.762622, 106.660172], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap'
        }).addTo(map);

        let fromMarker = null;
        let toMarker = null;
        let routeControl = null;

        // Hàm lấy tọa độ từ API Nominatim
        async function fetchCoordinates(location) {
            try {
                const response = await axios.get("https://nominatim.openstreetmap.org/search", {
                    params: {
                        format: 'json',
                        q: location
                    }
                });

                if (response.data.length === 0) {
                    alert(`Không tìm thấy vị trí: ${location}`);
                    return null;
                }

                return {
                    lat: parseFloat(response.data[0].lat),
                    lon: parseFloat(response.data[0].lon)
                };
            } catch (error) {
                console.error("Error fetching coordinates:", error);
                alert("Đã xảy ra lỗi khi lấy tọa độ.");
                return null;
            }
        }

        // Hàm tìm tuyến đường và hiển thị trên bản đồ
        async function getRoute() {
            const fromLocation = document.getElementById("PickupLocation").value;
            const toLocation = document.getElementById("DropoffLocation").value;

            if (!fromLocation || !toLocation) {
                alert("Vui lòng nhập địa chỉ.");
                return;
            }

            // Xóa các marker và tuyến đường cũ nếu có
            if (fromMarker) map.removeLayer(fromMarker);
            if (toMarker) map.removeLayer(toMarker);
            if (routeControl) map.removeControl(routeControl);

            // Lấy tọa độ cho điểm đi và điểm đến
            const fromCoords = await fetchCoordinates(fromLocation);
            if (!fromCoords) return;

            const toCoords = await fetchCoordinates(toLocation);
            if (!toCoords) return;

            // Thêm marker vào bản đồ
            fromMarker = L.marker([fromCoords.lat, fromCoords.lon]).addTo(map);
            toMarker = L.marker([toCoords.lat, toCoords.lon]).addTo(map);

            // Cập nhật giá trị tọa độ vào các trường ẩn
            document.getElementById("FromLatitude").value = fromCoords.lat;
            document.getElementById("FromLongitude").value = fromCoords.lon;
            document.getElementById("ToLatitude").value = toCoords.lat;
            document.getElementById("ToLongitude").value = toCoords.lon;

            // Hiển thị tuyến đường trên bản đồ
            routeControl = L.Routing.control({
                waypoints: [
                    L.latLng(fromCoords.lat, fromCoords.lon),
                    L.latLng(toCoords.lat, toCoords.lon)
                ],
                router: L.Routing.osrmv1({
                    serviceUrl: "https://router.project-osrm.org/route/v1"
                }),
                lineOptions: {
                    styles: [{ color: 'blue', opacity: 0.7, weight: 5 }]
                },
                createMarker: () => null
            }).addTo(map);

            // Lấy thông tin khoảng cách và thời gian từ tuyến đường
            routeControl.on('routesfound', function (e) {
                const route = e.routes[0];
                const distance = route.summary.totalDistance / 1000; // km
                const duration = route.summary.totalTime / 60; // phút

                document.getElementById("distance").value = distance.toFixed(2);
                document.getElementById("duration").value = duration.toFixed(2);

                
            });
        }

        // Đặt lại trạng thái bản đồ khi thay đổi địa chỉ
        function resetMap() {
            if (fromMarker) map.removeLayer(fromMarker);
            if (toMarker) map.removeLayer(toMarker);
            if (routeControl) map.removeControl(routeControl);

            document.getElementById("distance").value = "";
            document.getElementById("duration").value = "";
        }

        // Tự động tính tuyến đường khi rời chuột khỏi ô nhập địa chỉ
        async function autoCalculateRoute() {
            const fromLocation = document.getElementById("PickupLocation").value;
            const toLocation = document.getElementById("DropoffLocation").value;

            if (fromLocation && toLocation) {
                await getRoute();
            }
        }

        document.getElementById("PickupLocation").addEventListener("blur", autoCalculateRoute);
        document.getElementById("DropoffLocation").addEventListener("blur", autoCalculateRoute);

        // Kiểm tra trước khi gửi form
        document.querySelector("form").addEventListener("submit", function (e) {
            if (!document.getElementById("FromLatitude").value || !document.getElementById("ToLatitude").value) {
                alert("Hãy tìm tuyến đường trước khi gửi đơn.");
                e.preventDefault();
            }
        });

        // Hàm tính chi phí vận chuyển
        function getShip() {
            // Lấy giá trị từ các ô input `#distance` và `#Weight`
            var distance = parseFloat(document.getElementById("distance").value);
            var weight = parseFloat(document.getElementById("Weight").value);

            // Kiểm tra nếu cả khoảng cách và trọng lượng đều đã được nhập
            if (!isNaN(distance) && !isNaN(weight)) {
                $.ajax({
                    url: '/ShippingRequests/CalculateShippingCost', // Đường dẫn tới API hoặc action trên server
                    method: 'POST',
                    data: {
                        distance: distance,
                        weight: weight
                    },
                    // Xử lý khi yêu cầu thành công
                    success: function (data) {
                        // Giả sử dữ liệu trả về là chi phí vận chuyển, bạn sẽ hiển thị nó
                        document.getElementById("ShippingCost").value = data;
                    },
                    // Xử lý khi yêu cầu thất bại
                    error: function (error) {
                        alert('Yêu cầu thất bại');
                        console.log(error);
                    }
                });
            } else {
                alert('Vui lòng điền đầy đủ thông tin!');
            }
        }

    </script>

} *@


