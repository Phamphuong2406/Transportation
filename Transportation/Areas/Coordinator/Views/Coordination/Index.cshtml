@model IEnumerable<DataAccess.Entity.ShippingRequest>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Coordinator/Views/Shared/_LayoutCoordinator.cshtml";
            <style>
                .selected-row {
                    background-color: #f0f8ff !important; /* Màu xanh nhạt */
                }
            </style>
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="container mt-4">

    <div class="row">
        <div class="col-md-7">
            <h5 class="card-title">Bảng đơn hàng</h5>

            <table class="table table-striped" id="myTable">
                <thead>
                    <tr>
                        <th scope="col">STT</th>
                        <th scope="col">Khách hàng</th>
                        <th scope="col">Ngày đặt</th>
                        <th scope="col">Giá vc</th>
                        <th scope="col">Trọng tải</th>
                        <th scope="col">Loại hàng</th>
                        <th scope="col">Lựa chọn</th>
                    </tr>
                </thead>
                <tbody id="listUnassignedRequests">
                </tbody>
            </table>
        </div>

        <!-- Cột danh sách xe -->
        <div style="margin-top: 60px;" class="col-md-5">
            <h5 class="card-title">Danh sách chuyến hàng phù hợp</h5>
            <table class="table">
                <thead>
                    <tr>
                        <th>Mã</th>
                        <th>Ca làm</th>
                        <th>Xe v/c</th>
                        <th>ngày giao</th>
                        <th>Tình trạng</th>
                        <th>Lựa chọn</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Dữ liệu sẽ được render tại đây thông qua JavaScript -->
                </tbody>
            </table>
        </div>

    </div>

</div>
@* Modal popup *@
<div class="modal fade" id="routeModal" tabindex="-1" aria-labelledby="routeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="routeModalLabel">Lộ trình xe</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="map" style="height: 500px;"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let mapInstance = null;
        let selectedRequestId = null;

        document.addEventListener("DOMContentLoaded", function () {
            loadRequests();
        });

        function loadRequests() {
            fetch("/api/DispatchAPI/GetUnassignedRequests")
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById("listUnassignedRequests");
                    tableBody.innerHTML = ""; // Xóa dữ liệu cũ

                    data.forEach(item => {
                        let statusHtml = "";
                        if (item.Status === "Đã điều phối xe" || item.Status === "Đã nhận hàng" || item.Status === "Đang giao hàng") {
                            statusHtml = '<h6 class="text-success">Đã điều phối</h6>';
                        } else if (item.Status === "Chờ xác nhận") {
                            statusHtml = '<h6>Chưa điều phối</h6>';
                        } else {
                            statusHtml = '<h6 class="text-danger">Đã hủy</h6>';
                        }

                        const row = `
                                    <tr data-id="${item.RequestId}" class="table-row">
                                        <th scope="row">${item.RequestId}</th>
                                        <th>${item.CustomerName}</th>
                                        <td>${item.RequestDate}</td>
                                        <td>${item.ShippingCost}</td>
                                        <td>${item.Weight}</td>
                                        <td>${item.ProductNameType}</td>
                                        <td>
                                                <a href="/Coordinator/Coordination/Detail/${item.RequestId}" class="btn btn-warning btn-sm icon text-white">
                                                <i class="bi bi-info-circle text-white"></i> Xem
                                            </a>
                                            ${statusHtml}
                                        </td>
                                    </tr>`;
                        tableBody.innerHTML += row;
                    });

                    // Khởi tạo hoặc làm mới DataTable
                    const tableElement = $("#datatable-request");
                    if ($.fn.DataTable.isDataTable(tableElement)) {
                        tableElement.DataTable().clear().destroy();
                    }
                    tableElement.DataTable({
                        responsive: true,
                        autoWidth: false,
                        order: [[0, "desc"]],
                    });

                    attachRowEvents();
                })
                .catch(error => {
                    console.error("Lỗi khi lấy dữ liệu yêu cầu:", error);
                });
        }
 
  
        function attachRowEvents() {

            const rows = document.querySelectorAll('.table-row');


            rows.forEach(row => {
                row.addEventListener('click', function () {
                    rows.forEach(r => r.classList.remove('selected-row'));
                    this.classList.add('selected-row');

                    selectedRequestId = this.getAttribute('data-id');
                    console.log('huu',selectedRequestId);
                    fetch('/api/DispatchAPI/ProcessRow', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: parseInt(selectedRequestId) }),
                    })
                        .then(response => response.ok ? response.json() : Promise.reject('Không thể chuyến hàng phù hợp'))
                        .then(data => {
                            console.log(data);
                            const trucksTable = document.querySelector('.col-md-5 table tbody');
                            trucksTable.innerHTML = '';

                            if (Array.isArray(data) && data.length > 0) {
                                data.forEach(trip => {
                                    const row = `
                                                <tr>
                                                    <td>${trip.TripId}</td>
                                                    <td>${trip.ShiftName}</td>
                                                    <td>${trip.TruckId}</td>
                                                    <td>${trip.AssignedDate}</td>
                                                    <td>${trip.Status}</td>
                                                    <td>
                                                        <button class="btn btn-primary btn-sm assign-trip-btn" data-trip-id="${trip.TripId}">Phân công</button>
                                                        <button class="btn btn-info btn-sm route-truck-btn text-white" data-trip-id="${trip.TripId}">
                                                            <i class="bi bi-info-circle text-white"></i> Chi tiết
                                                        </button>
                                                    </td>
                                                </tr>`;
                                    trucksTable.innerHTML += row;
                                });
                                attachButtonEvents();
                            } else {
                                trucksTable.innerHTML = `<tr><td colspan="6" class="text-center">Không có xe phù hợp</td></tr>`;
                            }
                        })
                        .catch(error => console.error('Error fetching trucks:', error));
                });
            });
        }

        function attachButtonEvents() {
            document.querySelectorAll('.assign-trip-btn').forEach(button => {
                button.addEventListener('click', async function () {
                    const tripId = this.getAttribute('data-trip-id');
                 //   selectedRequestId = this.getAttribute('data-id');
                    console.log('dd',tripId);
                    console.log('gg',selectedRequestId);
                    try {
                        const response = await fetch('/api/DispatchAPI/CreateCoordination', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                requestId: parseInt(selectedRequestId),
                                tripId: parseInt(tripId),
                            }),
                        });

                        const result = await response.json();

                        if (!response.ok) throw new Error(result.message || 'Có lỗi xảy ra khi điều xe.');
                        alert(result.message);
                        await updateRequestStatus(selectedRequestId);
                        location.reload();
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi điều xe.');
                    }
                });
            });

            document.querySelectorAll('.route-truck-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const tripId = this.getAttribute('data-trip-id');

                    fetch('/api/DispatchAPI/Vehicleroute', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ tripId }),
                    })
                        .then(response => response.ok ? response.json() : Promise.reject('Không thể tải lộ trình, vui lòng thử lại!'))
                        .then(data => {
                            if (!data || data.length === 0) {
                                alert('Chưa có yêu cầu nào');
                                return;
                            }

                            const modal = new bootstrap.Modal(document.getElementById('routeModal'));
                            modal.show();

                            if (mapInstance) {
                                mapInstance.remove();
                                mapInstance = null;
                            }

                            mapInstance = L.map('map').setView([data[0].pickupLat, data[0].pickupLng], 13);
                            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 25 }).addTo(mapInstance);

                            const waypoints = [];
                            data.forEach(point => {
                                waypoints.push(L.latLng(point.pickupLat, point.pickupLng));
                                waypoints.push(L.latLng(point.dropoffLat, point.dropoffLng));
                            });

                            const routingControl = L.Routing.control({
                                waypoints: waypoints,
                                routeWhileDragging: true,
                                showAlternatives: false,
                                lineOptions: { styles: [{ color: 'blue', weight: 4 }] },
                                createMarker: (i, waypoint) => {
                                    const label = i % 2 === 0 ? 'Điểm lấy hàng' : 'Điểm trả hàng';
                                    return L.marker(waypoint.latLng).bindPopup(label);
                                }
                            }).addTo(mapInstance);

                            routingControl.on('routesfound', function (e) {
                                const summary = e.routes[0].summary;
                                const distance = (summary.totalDistance / 1000).toFixed(2);
                                const time = (summary.totalTime / 60).toFixed(2);
                                alert(`Tổng quãng đường: ${distance} km\nThời gian dự kiến: ${time} phút`);
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching vehicle route:', error);
                            alert('Không thể tải lộ trình, vui lòng thử lại!');
                        });
                });
            });
        }

        async function updateRequestStatus(requestId) {
            try {
                await fetch(`/api/DispatchAPI/UpdateRequestStatus/${requestId}`, { method: 'POST' });
            } catch (error) {
                console.error('Lỗi khi cập nhật trạng thái đơn hàng:', error);
            }
        }
    </script>


@*   <script>

        $(document).ready(function () {

            $("#filter-form").submit(function (e) {
                e.preventDefault(); // Ngăn việc submit form truyền thống

                const keyword = $("#search-input").val(); // Lấy từ khóa lọc
                $.ajax({
                    url: '/api/CoordinationAPI/Filter', // URL gọi đến action
                    type: 'GET',
                    data: { keyword: keyword }, // Truyền tham số từ khóa
                    success: function (response) {
                        console.log('data:', response);
                        $("#listUnassignedRequests").empty(); // Xóa dữ liệu cũ

                        $.each(response, function (index, item) {
                            var row = `<tr data-id="${item.requestId}" class="table-row">
                                                                                    <th scope="row">${item.requestId}</th>
                                                                                    <td>${item.requestDate}</td>
                                                                                    <td>${item.pickupLocation}</td>
                                                                                    <td>${item.dropoffLocation}</td>
                                                                                    <td>${item.shippingCost}</td>
                                                                                    <td>${item.weight}</td>
                                                                                    <td>${item.productTypeId}</td>
                                                                                    <td>
                                                                                        <a asp-area="Coordinator" asp-controller="Coordination" asp-action="Detail" asp-route-Id="${item.requestId}" class="btn btn-warning btn-sm">Xem đường</a>
                                                                                        ${item.Status === "Đã điều phối xe" || item.Status === "Đã nhận hàng" ? '<h6 class="text-success">Đã điều phối</h6>' : '<h6>Chưa điều phối</h6>'}
                                                                                    </td>
                                                                                </tr>`;
                            $("#listUnassignedRequests").append(row);
                        });

                        // Gắn lại các sự kiện cho các hàng mới thêm vào
                        attachRowEvents();
                    },
                    error: function () {
                        alert("Đã xảy ra lỗi trong quá trình lọc dữ liệu.");
                    }
                });
            });
       
        }
    </script>   *@
}
