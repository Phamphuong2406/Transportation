@{
    ViewData["Title"] = "Detail";
    Layout = "~/Areas/Drivers/Views/Shared/_LayoutDriver.cshtml";
}

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!-- Thêm CSS cho Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.0/dist/leaflet-routing-machine.css" />

<style>
    #map {
        height: 700px;
    }
</style>

<div>
    <h5 class="card-title">Đường đi dự kiến</h5>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">STT</th>
                <th scope="col">Họ tên</th>
                <th scope="col">Điểm lấy hàng</th>
                <th scope="col">Điểm trả hàng</th>
                <th scope="col">Trọng tải</th>
                <th scope="col">Loại hàng</th>
                <th scope="col">Giá</th>
            </tr>
        </thead>
        <tbody id="ListRequest">
        </tbody>
    </table>
</div>

<div id="map"></div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.0/dist/leaflet-routing-machine.js"></script>

    <script>
        window.onload = function () {
            const assignmentId = ViewBag.assignmentId
            // Khởi tạo map mặc định tại TP.HCM (sẽ cập nhật sau theo dữ liệu thực)
            let map = L.map('map').setView([10.762622, 106.660172], 13);

            // Thêm bản đồ nền
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            fetch(`/api/DispatchAPI/GetByIAssignmentId?id=${assignmentId}`)
                .then(res => {
                    if (!res.ok) throw new Error("Không thể lấy dữ liệu API.");
                    return res.json();
                })
                .then(data => {
                    console.log(data);
                    if (!data || data.length === 0) {
                        alert("Không có dữ liệu điều phối.");
                        return;
                    }

                    // Đổ dữ liệu bảng
                    let rows = data.map((item, index) => `
                                <tr>
                                    <td>${index + 1}</td>
                                    <td>${item.FullName}</td>
                                    <td>${item.PickupLocation}</td>
                                    <td>${item.DropoffLocation}</td>
                                    <td>${item.Weight}</td>
                                    <td>${item.ProductTypeId}</td>
                                    <td>${item.ShippingCost}</td>
                                </tr>
                            `).join("");
                    document.getElementById("ListRequest").innerHTML = rows;

                    // Sử dụng điểm lấy & trả hàng của đơn đầu tiên để hiển thị lộ trình
                    let first = data[0];

                    // Icon xe tải
                    var truckIcon = L.icon({
                        iconUrl: '@Url.Content("~/img/truck.png")',
                        iconSize: [70, 70]
                    });

                    // Thêm marker
                    var markerPickup = L.marker([first.PickupLat, first.PickupLng], { icon: truckIcon })
                        .addTo(map)
                        .bindPopup("Điểm lấy hàng");

                    var markerDropoff = L.marker([first.DropoffLat, first.DropoffLng])
                        .addTo(map)
                        .bindPopup("Điểm giao hàng");

                    // Căn bản đồ theo 2 điểm
                    map.fitBounds([
                        [first.PickupLat, first.PickupLng],
                        [first.DropoffLat, first.DropoffLng]
                    ]);

                    // Vẽ tuyến đường
                    L.Routing.control({
                        waypoints: [
                            L.latLng(first.PickupLat, first.PickupLng),
                            L.latLng(first.DropoffLat, first.DropoffLng)
                        ],
                        routeWhileDragging: false,
                        addWaypoints: false,
                        draggableWaypoints: false,
                        lineOptions: {
                            styles: [{ color: 'blue', weight: 4 }]
                        }
                    }).addTo(map);
                })
                .catch(error => console.error("Lỗi:", error));
        };
    </script>
}
